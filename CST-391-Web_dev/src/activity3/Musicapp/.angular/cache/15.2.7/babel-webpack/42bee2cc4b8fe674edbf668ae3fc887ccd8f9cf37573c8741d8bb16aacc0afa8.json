{"ast":null,"code":"import exampledata from '../../data/sample-music-data.json';\nimport * as i0 from \"@angular/core\";\nexport class MusicServiceService {\n  constructor() {\n    this.albums = exampledata;\n  }\n  getArtists() {\n    let artists = [];\n    let artistSet = new Set();\n    this.albums.forEach(a => artistSet.add(a.artist));\n    artistSet.forEach(a => artists.push({\n      artist: a\n    }));\n    return artists;\n  }\n  getAlbums() {\n    // Return the list of Albums\n    return this.albums;\n  }\n  getAlbumsOfArtist(artistName) {\n    let albums = [];\n    this.albums.forEach(album => {\n      if (album.artist == artistName) {\n        albums.push(album);\n      }\n    });\n    return albums;\n  }\n  createAlbum(album) {\n    // Add a new Album to the list of Albums\n    this.albums.push(album);\n    return 1;\n  }\n  updateAlbum(album) {\n    // Search for the Album in the list of Albums and replace it in the list\n    for (let i = 0; i < this.albums.length; ++i) {\n      if (this.albums[i].albumId == album.albumId) {\n        this.albums.splice(i, 1, album);\n        return 0;\n      }\n    }\n    return -1;\n  }\n  deleteAlbum(id) {\n    // Search for the Album in the list of Albums and delete from the list\n    for (let i = 0; i < this.albums.length; ++i) {\n      if (this.albums[i].albumId == id) {\n        this.albums.splice(i, 1);\n        return 0;\n      }\n    }\n    return -1;\n  }\n}\nMusicServiceService.ɵfac = function MusicServiceService_Factory(t) {\n  return new (t || MusicServiceService)();\n};\nMusicServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MusicServiceService,\n  factory: MusicServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,OAAOA,WAAW,MAAM,mCAAmC;;AAM3D,OAAM,MAAOC,mBAAmB;EADhCC;IAGE,WAAM,GAAYF,WAAW;;EAEtBG,UAAU;IACf,IAAIC,OAAO,GAAa,EAAE;IAC1B,IAAIC,SAAS,GAAG,IAAIC,GAAG,EAAU;IAEjC,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,CAAC,IAAIJ,SAAS,CAACK,GAAG,CAACD,CAAC,CAACE,MAAM,CAAC,CAAC;IAEjDN,SAAS,CAACG,OAAO,CAACC,CAAC,IAAIL,OAAO,CAACQ,IAAI,CAAC;MAACD,MAAM,EAAEF;IAAC,CAAC,CAAC,CAAC;IACjD,OAAOL,OAAO;EAChB;EAEOS,SAAS;IACd;IACA,OAAO,IAAI,CAACN,MAAM;EACpB;EAEOO,iBAAiB,CAACC,UAAkB;IAEzC,IAAIR,MAAM,GAAY,EAAE;IAGxB,IAAI,CAACA,MAAM,CAACC,OAAO,CAACQ,KAAK,IAAG;MAC1B,IAAIA,KAAK,CAACL,MAAM,IAAII,UAAU,EAAE;QAC9BR,MAAM,CAACK,IAAI,CAACI,KAAK,CAAC;;IAEtB,CAAC,CAAC;IACF,OAAOT,MAAM;EAEf;EAEOU,WAAW,CAACD,KAAY;IAC7B;IACA,IAAI,CAACT,MAAM,CAACK,IAAI,CAACI,KAAK,CAAC;IACvB,OAAO,CAAC;EACV;EAEOE,WAAW,CAACF,KAAY;IAC7B;IACA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACZ,MAAM,CAACa,MAAM,EAAE,EAAED,CAAC,EAAE;MAC3C,IAAI,IAAI,CAACZ,MAAM,CAACY,CAAC,CAAC,CAACE,OAAO,IAAIL,KAAK,CAACK,OAAO,EAAE;QAC3C,IAAI,CAACd,MAAM,CAACe,MAAM,CAACH,CAAC,EAAE,CAAC,EAAEH,KAAK,CAAC;QAC/B,OAAO,CAAC;;;IAGZ,OAAO,CAAC,CAAC;EACX;EAEOO,WAAW,CAACC,EAAU;IAC3B;IACA,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACZ,MAAM,CAACa,MAAM,EAAE,EAAED,CAAC,EAAE;MAC3C,IAAI,IAAI,CAACZ,MAAM,CAACY,CAAC,CAAC,CAACE,OAAO,IAAIG,EAAE,EAAE;QAChC,IAAI,CAACjB,MAAM,CAACe,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC;QACxB,OAAO,CAAC;;;IAGZ,OAAO,CAAC,CAAC;EACX;;AA3DWlB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAwB,SAAnBxB,mBAAmB;EAAAyB,YADN;AAAM","names":["exampledata","MusicServiceService","constructor","getArtists","artists","artistSet","Set","albums","forEach","a","add","artist","push","getAlbums","getAlbumsOfArtist","artistName","album","createAlbum","updateAlbum","i","length","albumId","splice","deleteAlbum","id","factory","providedIn"],"sourceRoot":"","sources":["C:\\git\\CST-391\\src\\activity3\\Musicapp\\src\\app\\service\\music-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport exampledata from '../../data/sample-music-data.json';\nimport { Artist } from './../models/artists.model';\nimport { Album } from '../models/albums.model';\nimport { Track } from '../models/tracks.model';\n\n@Injectable({ providedIn: 'root' })\nexport class MusicServiceService {\n\n  albums: Album[] = exampledata;\n\n  public getArtists(): Artist[] {\n    let artists: Artist[] = [];\n    let artistSet = new Set<string>();\n\n    this.albums.forEach(a => artistSet.add(a.artist));\n\n    artistSet.forEach(a => artists.push({artist: a}))\n    return artists;\n  }\n\n  public getAlbums(): Album[] {\n    // Return the list of Albums\n    return this.albums;\n  }\n\n  public getAlbumsOfArtist(artistName: String): Album[] {\n\n    let albums: Album[] = [];\n\n\n    this.albums.forEach(album => {\n      if (album.artist == artistName) {\n        albums.push(album);\n      }\n    });\n    return albums;\n\n  }\n\n  public createAlbum(album: Album): number {\n    // Add a new Album to the list of Albums\n    this.albums.push(album);\n    return 1;\n  }\n\n  public updateAlbum(album: Album): number {\n    // Search for the Album in the list of Albums and replace it in the list\n    for (let i = 0; i < this.albums.length; ++i) {\n      if (this.albums[i].albumId == album.albumId) {\n        this.albums.splice(i, 1, album);\n        return 0;\n      }\n    }\n    return -1;\n  }\n\n  public deleteAlbum(id: number): number {\n    // Search for the Album in the list of Albums and delete from the list\n    for (let i = 0; i < this.albums.length; ++i) {\n      if (this.albums[i].albumId == id) {\n        this.albums.splice(i, 1);\n        return 0;\n      }\n    }\n    return -1;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}