{"ast":null,"code":"import exampledata from '../../data/sample-music-data.json';\nimport { Album } from '../models/Album';\nimport { Artist } from '../models/Artist';\nimport { Track } from '../models/Track';\nimport * as i0 from \"@angular/core\";\nexport class MusicServiceService {\n  constructor() {\n    // Array to store artist information\n    this.artists = [];\n    // Array to store album information\n    this.albums = [];\n    // Initialize artists and albums arrays\n    this.createArtists();\n    this.createAlbums();\n  }\n  // Initializes the artists array with predefined data\n  createArtists() {\n    this.artists.push(new Artist(0, 'The Beatles'));\n  }\n  // Reads the example data and creates albums, only including albums by 'The Beatles'\n  createAlbums() {\n    exampledata.forEach(data => {\n      if (data.artist === 'The Beatles') {\n        // Map each track in the data to a Track object and create an Album object\n        const tracks = data.tracks.map(trackData => new Track(trackData.id, trackData.number, trackData.title, trackData.lyrics, trackData.video));\n        const album = new Album(data.id, data.title, data.artist, data.description, data.year, data.image, tracks);\n        // Push the newly created album to the albums array\n        this.albums.push(album);\n      }\n    });\n  }\n  // Retrieves all artists\n  getArtists() {\n    return this.artists;\n  }\n  // Retrieves all albums for a given artist\n  getAlbums(artist) {\n    return this.albums;\n  }\n  // Retrieves a specific album by its artist and ID\n  getAlbum(artist, id) {\n    // Find the album in the albums array based on artist and ID\n    const album = this.albums.find(a => a.Artist === artist && a.Id === id);\n    if (album) {\n      // If the album is found, map its tracks to Track objects and return a new Album object\n      const tracks = album.Tracks.map(track => new Track(track.Id, track.Number, track.Title, track.Lyrics, track.Video));\n      return new Album(album.Id, album.Title, album.Artist, album.Description, album.Year, album.Image, tracks);\n    }\n    return undefined; // Return undefined if the album is not found\n  }\n  // Adds a new album to the collection\n  createAlbum(album) {\n    this.albums.push(album); // Push the new album to the albums array\n  }\n  // Updates an existing album's information\n  updateAlbum(album) {\n    const index = this.albums.findIndex(a => a.Id === album.Id);\n    if (index !== -1) {\n      this.albums.splice(index, 1, album); // Replace the existing album with the updated one\n    }\n  }\n  // Deletes an album from the collection based on its ID and artist\n  // Returns 0 if successful, -1 if the album is not found\n  deleteAlbum(id, artist) {\n    const index = this.albums.findIndex(a => a.Id === id && a.Artist === artist);\n    if (index !== -1) {\n      this.albums.splice(index, 1); // Remove the album from the albums array\n      return 0; // Indicate success\n    }\n\n    return -1; // Indicate failure\n  }\n}\n\nMusicServiceService.ɵfac = function MusicServiceService_Factory(t) {\n  return new (t || MusicServiceService)();\n};\nMusicServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MusicServiceService,\n  factory: MusicServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["exampledata","Album","Artist","Track","MusicServiceService","constructor","createArtists","createAlbums","artists","push","forEach","data","artist","tracks","map","trackData","id","number","title","lyrics","video","album","description","year","image","albums","getArtists","getAlbums","getAlbum","find","a","Id","Tracks","track","Number","Title","Lyrics","Video","Description","Year","Image","undefined","createAlbum","updateAlbum","index","findIndex","splice","deleteAlbum","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Owenl\\source\\repos\\Activity3\\Musicapp\\src\\app\\service\\music-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport exampledata from '../../data/sample-music-data.json';\nimport { Album } from '../models/Album';\nimport { Artist } from '../models/Artist';\nimport { Track } from '../models/Track';\n\n@Injectable({ providedIn: 'root' })\nexport class MusicServiceService {\n    // Array to store artist information\n    private readonly artists: Artist[] = [];\n    \n    // Array to store album information\n    private readonly albums: Album[] = [];\n\n    constructor() {\n        // Initialize artists and albums arrays\n        this.createArtists();\n        this.createAlbums();\n    }\n\n    // Initializes the artists array with predefined data\n    private createArtists(): void {\n        this.artists.push(new Artist(0, 'The Beatles'));\n    }\n\n    // Reads the example data and creates albums, only including albums by 'The Beatles'\n    private createAlbums(): void {\n        exampledata.forEach((data: any) => {\n            if (data.artist === 'The Beatles') {\n                // Map each track in the data to a Track object and create an Album object\n                const tracks = data.tracks.map((trackData: any) => new Track(trackData.id, trackData.number, trackData.title, trackData.lyrics, trackData.video));\n                const album = new Album(data.id, data.title, data.artist, data.description, data.year, data.image, tracks);\n                \n                // Push the newly created album to the albums array\n                this.albums.push(album);\n            }\n        });\n    }\n\n    // Retrieves all artists\n    public getArtists(): Artist[] {\n        return this.artists;\n    }\n\n    // Retrieves all albums for a given artist\n    public getAlbums(artist: string): Album[] {\n        return this.albums;\n    }\n\n    // Retrieves a specific album by its artist and ID\n    public getAlbum(artist: string, id: number): Album | undefined {\n        // Find the album in the albums array based on artist and ID\n        const album = this.albums.find((a) => a.Artist === artist && a.Id === id);\n\n        if (album) {\n            // If the album is found, map its tracks to Track objects and return a new Album object\n            const tracks = album.Tracks.map((track) => new Track(track.Id, track.Number, track.Title, track.Lyrics, track.Video));\n            return new Album(album.Id, album.Title, album.Artist, album.Description, album.Year, album.Image, tracks);\n        }\n\n        return undefined; // Return undefined if the album is not found\n    }\n\n    // Adds a new album to the collection\n    public createAlbum(album: Album): void {\n        this.albums.push(album); // Push the new album to the albums array\n    }\n\n    // Updates an existing album's information\n    public updateAlbum(album: Album): void {\n        const index = this.albums.findIndex((a) => a.Id === album.Id);\n\n        if (index !== -1) {\n            this.albums.splice(index, 1, album); // Replace the existing album with the updated one\n        }\n    }\n\n    // Deletes an album from the collection based on its ID and artist\n    // Returns 0 if successful, -1 if the album is not found\n    public deleteAlbum(id: number, artist: string): number {\n        const index = this.albums.findIndex(a => a.Id === id && a.Artist === artist);\n        if (index !== -1) {\n            this.albums.splice(index, 1); // Remove the album from the albums array\n            return 0; // Indicate success\n        }\n        return -1; // Indicate failure\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}