@using CineScope.Shared.DTOs
@using System.Net.Http.Json
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudCard Elevation="0" Class="mb-4">
    <MudCardContent>
        <div class="d-flex justify-space-between align-center flex-wrap gap-2 mb-4">
            <MudText Typo="Typo.h6">Content Moderation</MudText>

            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       OnClick="@(() => NavigationManager.NavigateTo("/admin/moderation"))">
                Go to Full Moderation Page
            </MudButton>
        </div>

        @if (isLoading)
        {
            <div class="d-flex justify-center my-4">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else if (flaggedReviews == null || !flaggedReviews.Any())
        {
            <MudAlert Severity="Severity.Success">No flagged content requiring moderation.</MudAlert>
        }
        else
        {
            <MudText Typo="Typo.body1" Class="mb-3">
                There are <strong>@flaggedReviews.Count</strong> reviews that require moderation.
            </MudText>

            <MudTable Items="@flaggedReviews" Hover="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Username</MudTh>
                    <MudTh>Movie</MudTh>
                    <MudTh>Posted</MudTh>
                    <MudTh>Flagged Words</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Username">@context.Username</MudTd>
                    <MudTd DataLabel="Movie">@context.MovieTitle</MudTd>
                    <MudTd DataLabel="Posted">@context.CreatedAt.ToString("MMM dd, yyyy")</MudTd>
                    <MudTd DataLabel="Flagged Words">
                        @foreach (var word in context.FlaggedWords)
                        {
                            <MudChip Size="Size.Small" Color="Color.Error">@word</MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel="Actions">
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary"
                                   OnClick="@(() => ViewReviewDetails(context))">
                            Review
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudCardContent>
</MudCard>

@code {
    private List<ReviewModerationDto> flaggedReviews;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadFlaggedReviews();
    }

    private async Task LoadFlaggedReviews()
    {
        try
        {
            isLoading = true;
            var response = await Http.GetAsync("api/admin/flagged-reviews");

            if (response.IsSuccessStatusCode)
            {
                flaggedReviews = await response.Content.ReadFromJsonAsync<List<ReviewModerationDto>>();
            }
            else
            {
                Snackbar.Add("Failed to load flagged reviews", Severity.Error);
                flaggedReviews = new List<ReviewModerationDto>();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            flaggedReviews = new List<ReviewModerationDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ViewReviewDetails(ReviewModerationDto review)
    {
        var parameters = new DialogParameters
            {
                ["Review"] = review
            };

        var dialog = await DialogService.ShowAsync<ReviewModerationDialog>("Review Details", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is ModerationActionDto action)
        {
            await ProcessModeration(review.Id, action);
        }
    }

    private async Task ProcessModeration(string reviewId, ModerationActionDto action)
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"api/admin/moderate/{reviewId}", action);

            if (response.IsSuccessStatusCode)
            {
                // Remove the review from the list
                flaggedReviews.RemoveAll(r => r.Id == reviewId);
                Snackbar.Add($"Review {action.ActionType.ToLower()}d successfully", Severity.Success);
                StateHasChanged();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
}