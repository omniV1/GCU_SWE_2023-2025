{"ast":null,"code":"// Exporting the Artist class so it can be imported and used in other parts of the application.\nexport class Artist {\n  // The constructor for the Artist class. It's called when creating a new instance of Artist, allowing the ID and name to be specified.\n  constructor(id, name) {\n    // Private properties to store the artist's ID and name. The encapsulation principle is applied here to restrict direct access to these properties.\n    this.id = -1; // Initializes the artist's ID with a default value of -1.\n    this.name = \"\"; // Initializes the artist's name with a default, empty string.\n    this.id = id; // Sets the artist's ID.\n    this.name = name; // Sets the artist's name.\n  }\n  // A getter for the artist's ID. This provides read-only access to the private id property.\n  get Id() {\n    return this.id;\n  }\n  // A setter for the artist's ID. This allows the id property to be updated in a controlled manner.\n  set Id(id) {\n    this.id = id;\n  }\n  // A getter for the artist's name. This provides read-only access to the private name property.\n  get Name() {\n    return this.name;\n  }\n  // A setter for the artist's name. This allows the name property to be updated while maintaining encapsulation.\n  set Name(name) {\n    this.name = name;\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA,OAAM,MAAOA,MAAM;EAKf;EACAC,YAAYC,EAAU,EAAEC,IAAY;IALpC;IACQ,OAAE,GAAW,CAAC,CAAC,CAAC,CAAC;IACjB,SAAI,GAAW,EAAE,CAAC,CAAC;IAIvB,IAAI,CAACD,EAAE,GAAGA,EAAE,CAAC,CAAC;IACd,IAAI,CAACC,IAAI,GAAGA,IAAI,CAAC,CAAC;EACtB;EAEA;EACA,IAAIC,EAAE;IACF,OAAO,IAAI,CAACF,EAAE;EAClB;EACA;EACA,IAAIE,EAAE,CAACF,EAAU;IACb,IAAI,CAACA,EAAE,GAAGA,EAAE;EAChB;EAEA;EACA,IAAIG,IAAI;IACJ,OAAO,IAAI,CAACF,IAAI;EACpB;EACA;EACA,IAAIE,IAAI,CAACF,IAAY;IACjB,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpB","names":["Artist","constructor","id","name","Id","Name"],"sourceRoot":"","sources":["C:\\git\\CST-391\\src\\activity3\\Musicapp\\src\\app\\models\\Artist.ts"],"sourcesContent":["// Exporting the Artist class so it can be imported and used in other parts of the application.\nexport class Artist {\n    // Private properties to store the artist's ID and name. The encapsulation principle is applied here to restrict direct access to these properties.\n    private id: number = -1; // Initializes the artist's ID with a default value of -1.\n    private name: string = \"\"; // Initializes the artist's name with a default, empty string.\n\n    // The constructor for the Artist class. It's called when creating a new instance of Artist, allowing the ID and name to be specified.\n    constructor(id: number, name: string) {\n        this.id = id; // Sets the artist's ID.\n        this.name = name; // Sets the artist's name.\n    }\n\n    // A getter for the artist's ID. This provides read-only access to the private id property.\n    get Id(): number {\n        return this.id;\n    }\n    // A setter for the artist's ID. This allows the id property to be updated in a controlled manner.\n    set Id(id: number) {\n        this.id = id;\n    }\n\n    // A getter for the artist's name. This provides read-only access to the private name property.\n    get Name(): string {\n        return this.name;\n    }\n    // A setter for the artist's name. This allows the name property to be updated while maintaining encapsulation.\n    set Name(name: string) {\n        this.name = name;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}