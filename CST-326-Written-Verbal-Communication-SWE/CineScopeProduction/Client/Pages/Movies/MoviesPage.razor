@page "/movies"
@using CineScope.Shared.DTOs
@using System.Net.Http.Json
@using System.Threading
@using CineScope.Client.Services
@using CineScope.Client.Components.Movies
@inject ClientMovieCacheService MovieCacheService
@inject ISnackbar Snackbar

<PageTitle>CineScope - Movies</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    <MudPaper Elevation="3" Class="pa-4 mb-4">
        <div class="d-flex flex-column">
            <MudText Typo="Typo.h4" Class="mb-4">Browse Movies</MudText>
            <div class="search-controls">
                <MudTextField @bind-Value="searchQuery" 
                            Label="Search movies..." 
                            Variant="Variant.Outlined"
                            Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Search"
                            Class="flex-grow-1 min-width-250"
                            Immediate="true"
                            DebounceInterval="500"
                            OnDebounceIntervalElapsed="SearchMovies" />
                
                <MudSelect T="string" 
                          Label="Genre" 
                          Variant="Variant.Outlined"
                          MultiSelection="true"
                          @bind-Value="selectedGenre"
                          Class="min-width-200"
                          SelectedValuesChanged="@(() => SearchMovies())">
                    @foreach (var genre in genres)
                    {
                        <MudSelectItem Value="@genre">@genre</MudSelectItem>
                    }
                </MudSelect>

                <div class="action-buttons">
                    <MudButton Variant="Variant.Filled" 
                             Color="Color.Primary" 
                             OnClick="SearchMovies"
                             StartIcon="@Icons.Material.Filled.Search">
                        Search
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" 
                             Color="Color.Primary"
                             OnClick="ResetFilters"
                             StartIcon="@Icons.Material.Filled.Clear">
                        Reset
                    </MudButton>
                </div>
            </div>
        </div>
    </MudPaper>

    @if (isLoading)
    {
        <div class="d-flex justify-center my-8">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }
    else
    {
        <div class="movie-grid">
            @foreach (var movie in movies)
            {
                <MudPaper Elevation="2" Class="movie-card">
                    <MudLink Href="@($"/movie/{movie.Id}")">
                        <MudImage Src="@movie.PosterUrl" 
                                 Alt="@movie.Title"
                                 Elevation="0"
                                 ObjectFit="ObjectFit.Cover"
                                 Class="movie-poster" />
                    </MudLink>
                    <div class="movie-info pa-3">
                        <MudLink Href="@($"/movie/{movie.Id}")" Underline="Underline.None">
                            <MudText Typo="Typo.subtitle1" Class="movie-title">@movie.Title</MudText>
                        </MudLink>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">@movie.ReleaseDate.Year</MudText>
                        <div class="d-flex align-center mt-2">
                            <MudRating ReadOnly="true" 
                                     SelectedValue="@((int)Math.Round(movie.AverageRating))" 
                                     Color="Color.Primary"
                                     Size="Size.Small" />
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="ml-2">
                                @movie.AverageRating.ToString("0.0")
                            </MudText>
                        </div>
                    </div>
                </MudPaper>
            }
        </div>

        @if (!movies.Any())
        {
            <MudText Typo="Typo.h6" Align="Align.Center" Class="mt-8">
                No movies found matching your criteria.
            </MudText>
        }
    }
</MudContainer>

<style>
    .search-controls {
        display: flex;
        flex-wrap: wrap;
        gap: 16px;
        align-items: flex-start;
    }

    .min-width-250 {
        min-width: 250px;
    }

    .min-width-200 {
        min-width: 200px;
    }

    .action-buttons {
        display: flex;
        gap: 8px;
    }

    .movie-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 24px;
        margin-top: 24px;
    }

    .movie-card {
        display: flex;
        flex-direction: column;
        height: 100%;
        transition: transform 0.2s ease-in-out;
        overflow: hidden;
    }

    .movie-card:hover {
        transform: translateY(-4px);
    }

    .movie-poster {
        width: 100%;
        aspect-ratio: 2/3;
        object-fit: cover;
    }

    .movie-info {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .movie-title {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    @@media (max-width: 600px) {
        .search-controls {
            gap: 12px;
        }

        .min-width-250,
        .min-width-200 {
            min-width: 100%;
        }

        .action-buttons {
            width: 100%;
            justify-content: stretch;
        }

        .action-buttons .mud-button {
            flex: 1;
        }

        .movie-grid {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 16px;
        }
    }

    @@media (min-width: 601px) and (max-width: 960px) {
        .movie-grid {
            grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
            gap: 20px;
        }
    }

    @@media (min-width: 1920px) {
        .movie-grid {
            grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        }
    }

    /* iOS Safe Area Support */
    @@supports (padding: max(0px)) {
        .mud-container {
            padding-left: max(16px, env(safe-area-inset-left));
            padding-right: max(16px, env(safe-area-inset-right));
            padding-bottom: max(16px, env(safe-area-inset-bottom));
        }
    }
</style>

@code {
    private string searchQuery = "";
    private string selectedGenre = "";
    private List<string> genres = new() { "Action", "Adventure", "Comedy", "Drama", "Horror", "Sci-Fi", "Thriller" };
    private List<MovieDto> movies = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadMovies();
    }

    private async Task LoadMovies()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Get all movies from the cache service
            var allMovies = await MovieCacheService.GetAllMoviesAsync();

            // Apply filters
            movies = allMovies
                .Where(m => string.IsNullOrEmpty(searchQuery) || 
                           m.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .Where(m => string.IsNullOrEmpty(selectedGenre) || 
                           m.Genres.Contains(selectedGenre))
                .OrderByDescending(m => m.ReleaseDate)
                .ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading movies: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchMovies()
    {
        await LoadMovies();
    }

    private async Task ResetFilters()
    {
        searchQuery = "";
        selectedGenre = "";
        await LoadMovies();
    }
}