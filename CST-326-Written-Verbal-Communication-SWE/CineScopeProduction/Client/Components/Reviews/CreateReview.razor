@using System.Net.Http.Json
@using CineScope.Client.Services
@using CineScope.Client.Services.Auth
@using CineScope.Shared.DTOs
@using CineScope.Shared.Models
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject AuthService AuthService
@inject IJSRuntime JSRuntime

<MudCard Elevation="3" Class="create-review-form mb-4">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5">Write a Review</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" ValidationDelay="0">
        <MudCardContent>
            <!-- Review text first - this is the primary action -->
            <MudTextField T="string" Label="Your Review" @bind-Value="review.Text"
                          Required="true" RequiredError="Review text is required"
                          Variant="Variant.Outlined" Lines="5"
                          Counter="1000" MaxLength="1000"
                          HelperText="Share your thoughts about this movie"
                          Class="mb-4" />

            <!-- Rating section with better visual grouping -->
            <MudPaper Elevation="0" Class="py-3 px-4 mb-3" Style="background-color: rgba(255,255,255,0.05); border-radius: 8px;">
                <div class="d-flex flex-column gap-2">
                    <MudText Typo="Typo.subtitle1">Rate this movie</MudText>
                    <div class="d-flex align-center">
                        @for (int i = 1; i <= 5; i++)
                        {
                            var starValue = i;
                                <div @onclick="() => SetRating(starValue)" style="cursor: pointer; padding: 4px;">
                                @if (ratingValue >= starValue)
                                {
                                            <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Size="Size.Large" />
                                }
                                else
                                {
                                            <MudIcon Icon="@Icons.Material.Filled.StarOutline" Color="Color.Warning" Size="Size.Large" />
                                }
                                </div>
                        }
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="ml-2">
                            @(ratingValue > 0 ? $"{ratingValue} star{(ratingValue > 1 ? "s" : "")}" : "Select a rating")
                        </MudText>
                    </div>
                </div>
            </MudPaper>

            <!-- reCAPTCHA placed here, before alerts -->
            <div class="d-flex justify-center mt-4 mb-4">
                <div @ref="recaptchaElement" id="recaptcha-container" class="recaptcha-container" style="min-height: 78px;"></div>
            </div>

            <style>
                .recaptcha-container {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    width: 100%;
                }
                .recaptcha-container > div {
                    margin: 0 auto;
                }
                .recaptcha-container iframe {
                    margin: 0 auto;
                }
            </style>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                    <MudAlert Severity="Severity.Error" Class="mt-4" Dense="true">@errorMessage</MudAlert>
            }

            @if (contentWarning != null && contentWarning.Any())
            {
                    <MudAlert Severity="Severity.Warning" Class="mt-4">
                        <MudText>Content Warning</MudText>
                        <MudText Typo="Typo.body2">
                            Your review contains content that may violate our community guidelines.
                            Please remove the following terms: @string.Join(", ", contentWarning)
                        </MudText>
                    </MudAlert>
            }
        </MudCardContent>

        <MudCardActions Class="pb-4 px-4">
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="@Reset">Reset</MudButton>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       Disabled="@(isLoading || ratingValue == 0)" OnClick="@SubmitReview">
                @if (isLoading)
                {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Submitting</MudText>
                }
                else
                {
                        <MudText>Submit Review</MudText>
                }
            </MudButton>
        </MudCardActions>
    </MudForm>
</MudCard>

@code {
    private MudForm form;
    private bool success;
    private string[] errors = Array.Empty<string>();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private List<string> contentWarning = null;
    private ElementReference recaptchaElement;

    [Parameter] public string MovieId { get; set; } = string.Empty;
    [Parameter] public string CurrentUserId { get; set; } = string.Empty;
    [Parameter] public EventCallback<ReviewDto> OnReviewSubmitted { get; set; }

    private ReviewDto review = new()
        {
            Rating = 0,
            Text = string.Empty,
            CreatedAt = DateTime.Now
        };

    private int ratingValue = 0;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"CreateReview initialized with MovieId: {MovieId}");
        review.MovieId = MovieId;

        if (string.IsNullOrEmpty(CurrentUserId))
        {
            var user = await AuthService.GetCurrentUser();
            if (user != null)
            {
                review.UserId = user.Id;
                review.Username = user.Username;
                Console.WriteLine($"Using authenticated user: {user.Username} (ID: {user.Id})");
            }
        }
        else
        {
            review.UserId = CurrentUserId;
            Console.WriteLine($"Using provided user ID: {CurrentUserId}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Add a small delay to ensure the reCAPTCHA script is loaded
                await Task.Delay(500);
                await JSRuntime.InvokeVoidAsync("recaptchaFunctions.render", "recaptcha-container");
                Console.WriteLine("reCAPTCHA widget rendered");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error rendering reCAPTCHA: {ex.Message}");
                errorMessage = "Failed to initialize reCAPTCHA. Please refresh the page.";
                StateHasChanged();
            }
        }
    }

    private void SetRating(int value)
    {
        Console.WriteLine($"Setting rating from {ratingValue} to {value}");
        ratingValue = value;
        StateHasChanged();
    }

    private async Task<bool> ValidateContent()
    {
        try
        {
            Console.WriteLine("Validating review content...");
            var response = await Http.PostAsJsonAsync("api/ContentFilter/validate", review.Text);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ContentFilterResult>();
                if (result.IsApproved)
                {
                    contentWarning = null;
                    Console.WriteLine("Content validation passed");
                    return true;
                }

                contentWarning = result.ViolationWords;
                Console.WriteLine($"Content validation failed: {string.Join(", ", contentWarning)}");
                return false;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Content validation API error: {response.StatusCode} - {errorContent}");
                throw new Exception($"Content validation failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Content validation error: {ex.Message}");
            return true;
        }
    }

    private async Task SubmitReview()
    {
        await AuthService.EnsureAuthHeaderAsync();
        await form.Validate();

        if (!success)
        {
            Console.WriteLine("Form validation failed - review not submitted");
            return;
        }

        if (ratingValue == 0)
        {
            errorMessage = "Please select a rating";
            Snackbar.Add(errorMessage, Severity.Warning);
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var token = await JSRuntime.InvokeAsync<string>("recaptchaFunctions.executeRecaptcha");
            Console.WriteLine($"Got reCAPTCHA token: {(string.IsNullOrEmpty(token) ? "null" : "valid")}");

            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Please complete the reCAPTCHA verification.";
                Snackbar.Add(errorMessage, Severity.Warning);
                return;
            }

            if (!await ValidateContent())
            {
                errorMessage = "Review contains inappropriate content. Please revise.";
                Snackbar.Add(errorMessage, Severity.Warning);
                return;
            }

            if (string.IsNullOrEmpty(review.UserId))
            {
                var user = await AuthService.GetCurrentUser();
                if (user == null)
                {
                    errorMessage = "You must be logged in to submit a review.";
                    Snackbar.Add(errorMessage, Severity.Error);
                    return;
                }
                review.UserId = user.Id;
                review.Username = user.Username;
            }

            review.Rating = (double)ratingValue;
            review.CreatedAt = DateTime.Now;

            // Create review with captcha request
            var reviewWithCaptcha = new ReviewWithCaptchaRequest
                {
                    Review = review,
                    RecaptchaResponse = token
                };

            Console.WriteLine("Sending review with captcha token...");
            var response = await Http.PostAsJsonAsync("api/Review/with-captcha", reviewWithCaptcha);
            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Server response: {response.StatusCode}, Content: {responseContent}");

            if (response.IsSuccessStatusCode)
            {
                var createdReview = await response.Content.ReadFromJsonAsync<ReviewDto>();
                Snackbar.Add("Review submitted successfully!", Severity.Success);

                if (createdReview != null)
                {
                    await OnReviewSubmitted.InvokeAsync(createdReview);
                }

                Reset();
            }
            else
            {
                errorMessage = $"Failed to submit review: {response.StatusCode}";
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred. Please try again.";
            Console.WriteLine($"Review submission exception: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Reset()
    {
        review.Rating = 0;
        ratingValue = 0;
        review.Text = string.Empty;
        errorMessage = string.Empty;
        contentWarning = null;
        
        try
        {
            await JSRuntime.InvokeVoidAsync("recaptchaFunctions.reset");
        }
        catch (Exception ex)
        {
            // Log the error but don't prevent the form from resetting
            Console.WriteLine($"Error resetting reCAPTCHA: {ex.Message}");
        }
        
        StateHasChanged();
    }

    private class ContentFilterResult
    {
        public bool IsApproved { get; set; }
        public List<string> ViolationWords { get; set; } = new();
    }
}
