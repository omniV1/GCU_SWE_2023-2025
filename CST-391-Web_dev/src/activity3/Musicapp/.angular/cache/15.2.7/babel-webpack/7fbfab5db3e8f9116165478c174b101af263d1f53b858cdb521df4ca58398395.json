{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../service/music-service.service\";\nimport * as i3 from \"@angular/common\";\nfunction DeleteAlbumComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Deleting album... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DeleteAlbumComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" The album has been successfully deleted. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DeleteAlbumComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" An error occurred while attempting to delete the album. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class DeleteAlbumComponent {\n  // Injecting necessary services via the constructor.\n  constructor(route,\n  // To access route parameters.\n  musicService,\n  // To call deletion logic on the music service.\n  router // To navigate to another route upon successful deletion.\n  ) {\n    this.route = route;\n    this.musicService = musicService;\n    this.router = router;\n    // Flags to track the state of the deletion process.\n    this.isDeleting = false; // Indicates if the deletion process is currently happening.\n    this.isDeleted = false; // Indicates if the album has been successfully deleted.\n    this.deleteError = false; // Indicates if there was an error during the deletion process.\n  }\n\n  ngOnInit() {\n    // Retrieving the 'artist' and 'id' from the route parameters.\n    const artist = this.route.snapshot.paramMap.get('artist');\n    const id = Number(this.route.snapshot.paramMap.get('id'));\n    // Ensures that both 'artist' and 'id' are present before proceeding with deletion.\n    if (artist && id) {\n      this.deleteAlbum(id, artist);\n    }\n  }\n  // Method to handle the deletion of an album.\n  deleteAlbum(id, artist) {\n    this.isDeleting = true; // Marks the beginning of the deletion process.\n    // Calls the musicService to delete the album by its id and artist.\n    const result = this.musicService.deleteAlbum(id, artist);\n    // Once the service call is complete, update the deletion status flags accordingly.\n    this.isDeleting = false; // Marks the end of the deletion process.\n    if (result === 0) {\n      // If the album was successfully deleted, set the flag and log a success message.\n      this.isDeleted = true;\n      console.log('Album successfully deleted');\n      // After a delay, navigate to the list-albums page.\n      setTimeout(() => this.router.navigate(['/list-albums']), 2000);\n    } else {\n      // If deletion failed, set the error flag and log an error message.\n      this.deleteError = true;\n      console.log('Error deleting album');\n    }\n  }\n}\nDeleteAlbumComponent.ɵfac = function DeleteAlbumComponent_Factory(t) {\n  return new (t || DeleteAlbumComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.MusicServiceService), i0.ɵɵdirectiveInject(i1.Router));\n};\nDeleteAlbumComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DeleteAlbumComponent,\n  selectors: [[\"app-delete-album\"]],\n  decls: 3,\n  vars: 3,\n  consts: [[4, \"ngIf\"]],\n  template: function DeleteAlbumComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, DeleteAlbumComponent_div_0_Template, 2, 0, \"div\", 0);\n      i0.ɵɵtemplate(1, DeleteAlbumComponent_div_1_Template, 2, 0, \"div\", 0);\n      i0.ɵɵtemplate(2, DeleteAlbumComponent_div_2_Template, 2, 0, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isDeleting);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isDeleted);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.deleteError);\n    }\n  },\n  dependencies: [i3.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;IACAA,2BAAwB;IACpBA,mCACF;IAAAA,iBAAM;;;;;IAGNA,2BAAuB;IACrBA,0DACF;IAAAA,iBAAM;;;;;IAGNA,2BAAyB;IACvBA,yEACF;IAAAA,iBAAM;;;ACDR,OAAM,MAAOC,oBAAoB;EAM/B;EACAC,YACUC,KAAqB;EAAE;EACvBC,YAAiC;EAAE;EACnCC,MAAc,CAAC;EAAA;IAFf,UAAK,GAALF,KAAK;IACL,iBAAY,GAAZC,YAAY;IACZ,WAAM,GAANC,MAAM;IAThB;IACA,eAAU,GAAY,KAAK,CAAC,CAAC;IAC7B,cAAS,GAAY,KAAK,CAAC,CAAC;IAC5B,gBAAW,GAAY,KAAK,CAAC,CAAC;EAO1B;;EAEJC,QAAQ;IACN;IACA,MAAMC,MAAM,GAAG,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,QAAQ,CAAC;IACzD,MAAMC,EAAE,GAAGC,MAAM,CAAC,IAAI,CAACT,KAAK,CAACK,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC,CAAC;IAEzD;IACA,IAAIH,MAAM,IAAII,EAAE,EAAE;MAChB,IAAI,CAACE,WAAW,CAACF,EAAE,EAAEJ,MAAM,CAAC;;EAEhC;EAEA;EACAM,WAAW,CAACF,EAAU,EAAEJ,MAAc;IACpC,IAAI,CAACO,UAAU,GAAG,IAAI,CAAC,CAAC;IACxB;IACA,MAAMC,MAAM,GAAG,IAAI,CAACX,YAAY,CAACS,WAAW,CAACF,EAAE,EAAEJ,MAAM,CAAC;IACxD;IACA,IAAI,CAACO,UAAU,GAAG,KAAK,CAAC,CAAC;IAEzB,IAAIC,MAAM,KAAK,CAAC,EAAE;MAChB;MACA,IAAI,CAACC,SAAS,GAAG,IAAI;MACrBC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC;MACAC,UAAU,CAAC,MAAM,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,EAAE,IAAI,CAAC;KAC/D,MAAM;MACL;MACA,IAAI,CAACC,WAAW,GAAG,IAAI;MACvBJ,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;;EAEvC;;AA3CWjB,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAAqB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDXjC1B,qEAEQ;MAGNA,qEAEM;MAGNA,qEAEM;;;MAZFA,qCAAgB;MAKdA,eAAe;MAAfA,oCAAe;MAKfA,eAAiB;MAAjBA,sCAAiB","names":["i0","DeleteAlbumComponent","constructor","route","musicService","router","ngOnInit","artist","snapshot","paramMap","get","id","Number","deleteAlbum","isDeleting","result","isDeleted","console","log","setTimeout","navigate","deleteError","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\git\\CST-391\\src\\activity3\\Musicapp\\src\\app\\delete-album\\delete-album.component.html","C:\\git\\CST-391\\src\\activity3\\Musicapp\\src\\app\\delete-album\\delete-album.component.ts"],"sourcesContent":["<!-- This div will be displayed while the delete operation is in progress -->\n<div *ngIf=\"isDeleting\">\n    Deleting album...\n  </div>\n  \n  <!-- This div will be displayed if the delete operation is successful -->\n  <div *ngIf=\"isDeleted\">\n    The album has been successfully deleted.\n  </div>\n  \n  <!-- This div will be displayed if there was an error during the deletion process -->\n  <div *ngIf=\"deleteError\">\n    An error occurred while attempting to delete the album.\n  </div>\n  ","// Angular core imports for component definition and lifecycle hooks.\nimport { Component, OnInit } from '@angular/core';\n// Imports for handling routing within the Angular application.\nimport { ActivatedRoute, Router } from '@angular/router';\n// Custom service for music data operations.\nimport { MusicServiceService } from '../service/music-service.service';\n\n@Component({\n  selector: 'app-delete-album', // The custom element tag to represent this component in HTML.\n  templateUrl: './delete-album.component.html', // The HTML template file associated with this component.\n  styleUrls: ['./delete-album.component.css'] // The CSS styles specific to this component.\n})\nexport class DeleteAlbumComponent implements OnInit {\n  // Flags to track the state of the deletion process.\n  isDeleting: boolean = false; // Indicates if the deletion process is currently happening.\n  isDeleted: boolean = false; // Indicates if the album has been successfully deleted.\n  deleteError: boolean = false; // Indicates if there was an error during the deletion process.\n\n  // Injecting necessary services via the constructor.\n  constructor(\n    private route: ActivatedRoute, // To access route parameters.\n    private musicService: MusicServiceService, // To call deletion logic on the music service.\n    private router: Router // To navigate to another route upon successful deletion.\n  ) { }\n\n  ngOnInit() {\n    // Retrieving the 'artist' and 'id' from the route parameters.\n    const artist = this.route.snapshot.paramMap.get('artist');\n    const id = Number(this.route.snapshot.paramMap.get('id'));\n\n    // Ensures that both 'artist' and 'id' are present before proceeding with deletion.\n    if (artist && id) {\n      this.deleteAlbum(id, artist);\n    }\n  }\n\n  // Method to handle the deletion of an album.\n  deleteAlbum(id: number, artist: string) {\n    this.isDeleting = true; // Marks the beginning of the deletion process.\n    // Calls the musicService to delete the album by its id and artist.\n    const result = this.musicService.deleteAlbum(id, artist);\n    // Once the service call is complete, update the deletion status flags accordingly.\n    this.isDeleting = false; // Marks the end of the deletion process.\n    \n    if (result === 0) {\n      // If the album was successfully deleted, set the flag and log a success message.\n      this.isDeleted = true;\n      console.log('Album successfully deleted');\n      // After a delay, navigate to the list-albums page.\n      setTimeout(() => this.router.navigate(['/list-albums']), 2000);\n    } else {\n      // If deletion failed, set the error flag and log an error message.\n      this.deleteError = true;\n      console.log('Error deleting album');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}