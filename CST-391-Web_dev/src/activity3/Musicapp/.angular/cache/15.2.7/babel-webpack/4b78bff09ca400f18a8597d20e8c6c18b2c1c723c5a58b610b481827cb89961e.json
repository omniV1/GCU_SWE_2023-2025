{"ast":null,"code":"// Importing model classes for strong typing and structure\nimport { Album } from '../models/Album';\nimport { Track } from '../models/Track';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/music-service.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction CreateAlbumComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"form\", 3, 4);\n    i0.ɵɵlistener(\"ngSubmit\", function CreateAlbumComponent_div_0_Template_form_ngSubmit_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onSubmit());\n    });\n    i0.ɵɵelementStart(3, \"div\", 5)(4, \"label\", 6);\n    i0.ɵɵtext(5, \"Artist\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"input\", 7);\n    i0.ɵɵlistener(\"ngModelChange\", function CreateAlbumComponent_div_0_Template_input_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.album.Artist = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 5)(8, \"label\", 8);\n    i0.ɵɵtext(9, \"Album\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"input\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function CreateAlbumComponent_div_0_Template_input_ngModelChange_10_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.album.Title = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"div\", 5)(12, \"label\", 10);\n    i0.ɵɵtext(13, \"Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"textarea\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function CreateAlbumComponent_div_0_Template_textarea_ngModelChange_14_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.album.Description = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 5)(16, \"label\", 12);\n    i0.ɵɵtext(17, \"Year\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"input\", 13);\n    i0.ɵɵlistener(\"ngModelChange\", function CreateAlbumComponent_div_0_Template_input_ngModelChange_18_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.album.Year = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"div\", 5)(20, \"label\", 14);\n    i0.ɵɵtext(21, \"Image Filename\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"input\", 15);\n    i0.ɵɵlistener(\"ngModelChange\", function CreateAlbumComponent_div_0_Template_input_ngModelChange_22_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.album.Image = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"div\", 5)(24, \"label\", 16);\n    i0.ɵɵtext(25, \"Tracks\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(26, \"textarea\", 17);\n    i0.ɵɵlistener(\"ngModelChange\", function CreateAlbumComponent_div_0_Template_textarea_ngModelChange_26_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.tracksRaw = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(27, \"button\", 18);\n    i0.ɵɵtext(28, \"Submit\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.album.Artist);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.album.Title);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.album.Description);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.album.Year);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.album.Image);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.tracksRaw);\n  }\n}\nfunction CreateAlbumComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Album was added successfully.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class CreateAlbumComponent {\n  // Injecting the music service to handle album creation.\n  constructor(service) {\n    this.service = service;\n    // Initializing a new Album object to collect user input from the form.\n    // A random ID is generated to uniquely identify the new album.\n    this.album = new Album(Math.floor(Math.random() * 1000000), '', '', '', 0, '', []);\n    // Holds the user input for tracks in a raw string format before parsing.\n    this.tracksRaw = '';\n    // Flag to indicate whether the album submission form has been submitted.\n    this.wasSubmitted = false;\n  }\n  // Lifecycle hook for initialization. No specific actions are performed on component initialization in this case.\n  ngOnInit() {}\n  // Handles the submission of the album creation form.\n  onSubmit() {\n    // Parses the raw track data from the form into an array of Track objects.\n    const tracks = this.parseTracks(this.tracksRaw);\n    // Assigns the parsed tracks to the album's Tracks property.\n    this.album.Tracks = tracks;\n    // Uses the injected service to create the album with the provided data.\n    const status = this.service.createAlbum(this.album);\n    // Logs the result of the album creation operation.\n    console.log('The return from createAlbum() was ' + status);\n    // Sets the submission flag to true, which can be used to show feedback or navigate away.\n    this.wasSubmitted = true;\n  }\n  // Parses a raw string of track data into an array of Track objects.\n  parseTracks(rawTracks) {\n    const tracks = [];\n    // Splits the raw string into lines, each line representing a track.\n    const lines = rawTracks.split('\\n');\n    // Iterates over each line, creating a new Track object from the data.\n    lines.forEach((line, index) => {\n      // Splits the line into components based on a delimiter (':') and assigns each to a variable.\n      const [title, lyrics, video] = line.split(':');\n      // Creates and adds a new Track object to the tracks array with a unique ID and the parsed data.\n      tracks.push(new Track(Math.floor(Math.random() * 1000000), index + 1, title, lyrics || '', video || ''));\n    });\n    return tracks;\n  }\n}\nCreateAlbumComponent.ɵfac = function CreateAlbumComponent_Factory(t) {\n  return new (t || CreateAlbumComponent)(i0.ɵɵdirectiveInject(i1.MusicServiceService));\n};\nCreateAlbumComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateAlbumComponent,\n  selectors: [[\"app-create-album\"]],\n  decls: 2,\n  vars: 2,\n  consts: [[\"class\", \"form-container\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"form-container\"], [3, \"ngSubmit\"], [\"createForm\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"artist\"], [\"id\", \"artist\", \"type\", \"text\", \"aria-describedby\", \"helpArtist\", \"placeholder\", \"Enter the name of the Artist\", \"required\", \"\", \"name\", \"artist\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"album\"], [\"id\", \"album\", \"type\", \"text\", \"aria-describedby\", \"helpAlbum\", \"placeholder\", \"Enter the name of the Album\", \"required\", \"\", \"name\", \"title\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"description\"], [\"id\", \"description\", \"rows\", \"3\", \"aria-describedby\", \"helpDescription\", \"placeholder\", \"Enter the description of the Album\", \"required\", \"\", \"name\", \"description\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"year\"], [\"id\", \"year\", \"type\", \"text\", \"aria-describedby\", \"helpYear\", \"placeholder\", \"Enter the year of the Album\", \"required\", \"\", \"name\", \"year\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"image\"], [\"id\", \"image\", \"type\", \"text\", \"aria-describedby\", \"helpImage\", \"placeholder\", \"Enter the image filename for the Album\", \"name\", \"image\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"tracks\"], [\"id\", \"tracks\", \"rows\", \"3\", \"aria-describedby\", \"helpTracks\", \"placeholder\", \"Enter each track followed by a return key for the Album\", \"required\", \"\", \"name\", \"tracks\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n  template: function CreateAlbumComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CreateAlbumComponent_div_0_Template, 29, 6, \"div\", 0);\n      i0.ɵɵtemplate(1, CreateAlbumComponent_div_1_Template, 2, 0, \"div\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.wasSubmitted);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.wasSubmitted);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Album","Track","i0","CreateAlbumComponent","constructor","service","Math","floor","random","ngOnInit","onSubmit","tracks","parseTracks","tracksRaw","album","Tracks","status","createAlbum","console","log","wasSubmitted","rawTracks","lines","split","forEach","line","index","title","lyrics","video","push","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\git\\CST-391\\src\\activity3\\Musicapp\\src\\app\\create-album\\create-album.component.ts","C:\\git\\CST-391\\src\\activity3\\Musicapp\\src\\app\\create-album\\create-album.component.html"],"sourcesContent":["// Core Angular imports for component functionality\nimport { Component, OnInit } from '@angular/core';\n// Importing model classes for strong typing and structure\nimport { Album } from '../models/Album';\nimport { Track } from '../models/Track';\n// Importing a service that handles data operations for music albums\nimport { MusicServiceService } from '../service/music-service.service';\n\n@Component({\n\tselector: 'app-create-album', // Defines the custom HTML tag for this component.\n\ttemplateUrl: './create-album.component.html', // Specifies the HTML template for the component.\n\tstyleUrls: ['./create-album.component.css'], // Specifies the CSS styles for the component.\n})\nexport class CreateAlbumComponent implements OnInit {\n\t// Initializing a new Album object to collect user input from the form.\n\t// A random ID is generated to uniquely identify the new album.\n\talbum: Album = new Album(Math.floor(Math.random() * 1000000), '', '', '', 0, '', []);\n\n\t// Holds the user input for tracks in a raw string format before parsing.\n\ttracksRaw: string = '';\n\n\t// Flag to indicate whether the album submission form has been submitted.\n\twasSubmitted: boolean = false;\n\n\t// Injecting the music service to handle album creation.\n\tconstructor(private service: MusicServiceService) { }\n\n\t// Lifecycle hook for initialization. No specific actions are performed on component initialization in this case.\n\tngOnInit() { }\n\n\t// Handles the submission of the album creation form.\n\tpublic onSubmit() {\n\t\t// Parses the raw track data from the form into an array of Track objects.\n\t\tconst tracks: Track[] = this.parseTracks(this.tracksRaw);\n\n\t\t// Assigns the parsed tracks to the album's Tracks property.\n\t\tthis.album.Tracks = tracks;\n\n\t\t// Uses the injected service to create the album with the provided data.\n\t\tconst status = this.service.createAlbum(this.album);\n\n\t\t// Logs the result of the album creation operation.\n\t\tconsole.log('The return from createAlbum() was ' + status);\n\n\t\t// Sets the submission flag to true, which can be used to show feedback or navigate away.\n\t\tthis.wasSubmitted = true;\n\t}\n\n\t// Parses a raw string of track data into an array of Track objects.\n\tprivate parseTracks(rawTracks: string): Track[] {\n\t\tconst tracks: Track[] = [];\n\t\t// Splits the raw string into lines, each line representing a track.\n\t\tconst lines = rawTracks.split('\\n');\n\n\t\t// Iterates over each line, creating a new Track object from the data.\n\t\tlines.forEach((line, index) => {\n\t\t\t// Splits the line into components based on a delimiter (':') and assigns each to a variable.\n\t\t\tconst [title, lyrics, video] = line.split(':');\n\t\t\t// Creates and adds a new Track object to the tracks array with a unique ID and the parsed data.\n\t\t\ttracks.push(new Track(Math.floor(Math.random() * 1000000), index + 1, title, lyrics || '', video || ''));\n\t\t});\n\n\t\treturn tracks;\n\t}\n}\n","<!-- This div wraps the form and only displays it if the album has not been submitted -->\n<div class=\"form-container\" *ngIf=\"!wasSubmitted\">\n    <!-- The form uses Angular's template-driven forms approach, handling the submit event with the onSubmit() method -->\n\t<form (ngSubmit)=\"onSubmit()\" #createForm=\"ngForm\">\n        <!-- Form group for the artist input field -->\n\t\t<div class=\"form-group\">\n\t\t\t<label for=\"artist\">Artist</label> \n            <input \n                id=\"artist\" \n                type=\"text\"\n\t\t\t\tclass=\"form-control\" \n\t\t\t\taria-describedby=\"helpArtist\"\n\t\t\t\tplaceholder=\"Enter the name of the Artist\" \n\t\t\t\trequired \n\t\t\t\t[(ngModel)]=\"album.Artist\" \n\t\t\t\tname=\"artist\">\n\t\t</div>\n        <!-- Form group for the album title input field -->\n\t\t<div class=\"form-group\">\n\t\t\t<label for=\"album\">Album</label> \n            <input \n                id=\"album\" \n                type=\"text\"\n\t\t\t\tclass=\"form-control\" \n\t\t\t\taria-describedby=\"helpAlbum\"\n\t\t\t\tplaceholder=\"Enter the name of the Album\" \n\t\t\t\trequired \n\t\t\t\t[(ngModel)]=\"album.Title\" \n\t\t\t\tname=\"title\">\n\t\t</div>\n        <!-- Form group for the description textarea -->\n\t\t<div class=\"form-group\">\n\t\t\t<label for=\"description\">Description</label>\n\t\t\t<textarea \n                id=\"description\" \n                rows=\"3\" \n                class=\"form-control\"\n\t\t\t\taria-describedby=\"helpDescription\"\n\t\t\t\tplaceholder=\"Enter the description of the Album\" \n\t\t\t\trequired \n\t\t\t\t[(ngModel)]=\"album.Description\" \n\t\t\t\tname=\"description\"></textarea>\n\t\t</div>\n        <!-- Form group for the year input field -->\n\t\t<div class=\"form-group\">\n\t\t\t<label for=\"year\">Year</label> \n            <input \n                id=\"year\" \n                type=\"text\"\n\t\t\t\tclass=\"form-control\" \n\t\t\t\taria-describedby=\"helpYear\"\n\t\t\t\tplaceholder=\"Enter the year of the Album\" \n\t\t\t\trequired \n\t\t\t\t[(ngModel)]=\"album.Year\" \n\t\t\t\tname=\"year\">\n\t\t</div>\n        <!-- Form group for the image filename input field -->\n\t\t<div class=\"form-group\">\n\t\t\t<label for=\"image\">Image Filename</label> \n            <input \n                id=\"image\"\n\t\t\t\ttype=\"text\" \n\t\t\t\tclass=\"form-control\" \n\t\t\t\taria-describedby=\"helpImage\"\n\t\t\t\tplaceholder=\"Enter the image filename for the Album\"\n\t\t\t\t[(ngModel)]=\"album.Image\" \n\t\t\t\tname=\"image\">\n\t\t</div>\n        <!-- Form group for the tracks textarea -->\n\t\t<div class=\"form-group\">\n\t\t\t<label for=\"tracks\">Tracks</label>\n\t\t\t<textarea \n                id=\"tracks\" \n                rows=\"3\" \n                class=\"form-control\"\n\t\t\t\taria-describedby=\"helpTracks\"\n\t\t\t\tplaceholder=\"Enter each track followed by a return key for the Album\"\n\t\t\t\trequired \n\t\t\t\t[(ngModel)]=\"tracksRaw\" \n\t\t\t\tname=\"tracks\"></textarea>\n\t\t</div>\n        <!-- Submit button for the form -->\n\t\t<button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n\t</form>\n</div>\n\n<!-- This div displays a confirmation message if the album has been submitted -->\n<div *ngIf=\"wasSubmitted\">Album was added successfully.</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}