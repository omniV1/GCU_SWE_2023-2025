@page "/admin"
@attribute [Authorize(Roles = "Admin")]
@using CineScope.Shared.DTOs
@using System.Net.Http.Json
@using CineScope.Client.Components.Admin
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>CineScope - Admin Dashboard</PageTitle>

<AdminBreadCrumb />

<MudText Typo="Typo.h4" Class="mb-4">Dashboard Overview</MudText>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (stats != null)
{
    <MudGrid>
        <!-- Stats Cards -->
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4 d-flex flex-column" Elevation="2">
                <MudText Typo="Typo.subtitle1">Total Users</MudText>
                <MudText Typo="Typo.h3" Color="Color.Primary">@stats.TotalUsers</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4 d-flex flex-column" Elevation="2">
                <MudText Typo="Typo.subtitle1">Total Movies</MudText>
                <MudText Typo="Typo.h3" Color="Color.Primary">@stats.TotalMovies</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4 d-flex flex-column" Elevation="2">
                <MudText Typo="Typo.subtitle1">Total Reviews</MudText>
                <MudText Typo="Typo.h3" Color="Color.Primary">@stats.TotalReviews</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4 d-flex flex-column" Elevation="2">
                <MudText Typo="Typo.subtitle1">Flagged Content</MudText>
                <MudText Typo="Typo.h3" Color="Color.Error">@stats.FlaggedContent</MudText>
            </MudPaper>
        </MudItem>

        <!-- MongoDB Collection Statistics -->
        <MudItem xs="12">
            <MudCard Elevation="2" Class="mt-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">MongoDB Collection Statistics</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudSimpleTable>
                        <thead>
                            <tr>
                                <th>Collection</th>
                                <th>Document Count</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (stats.CollectionStats != null)
                            {
                                @foreach (var stat in stats.CollectionStats)
                                {
                                    <tr>
                                        <td>@stat.Key</td>
                                        <td>@stat.Value</td>
                                        <td>
                                            <MudButton Size="Size.Small"
                                                       Variant="Variant.Outlined"
                                                       Color="Color.Primary"
                                                       OnClick="@(() => NavigateToManageCollection(stat.Key))">
                                                Manage
                                            </MudButton>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Recent Activity Section -->
        <MudItem xs="12">
            <MudCard Elevation="2" Class="mt-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Recent Activity</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" OnClick="@RefreshDashboard" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="@(stats.RecentActivity ?? new List<RecentActivityDto>())" Hover="true" Breakpoint="Breakpoint.Sm">
                        <HeaderContent>
                            <MudTh>Timestamp</MudTh>
                            <MudTh>User</MudTh>
                            <MudTh>Action</MudTh>
                            <MudTh>Details</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Timestamp">@context.Timestamp.ToString("MMM dd, yyyy HH:mm")</MudTd>
                            <MudTd DataLabel="User">@context.Username</MudTd>
                            <MudTd DataLabel="Action">
                                <MudChip Size="Size.Small" Color="@GetActionColor(context.ActionType)">@context.ActionType</MudChip>
                            </MudTd>
                            <MudTd DataLabel="Details">@context.Details</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}
else
{
    <MudAlert Severity="Severity.Warning">Failed to load dashboard data. Please try refreshing.</MudAlert>
    <MudButton Class="mt-3" Variant="Variant.Filled" Color="Color.Primary" OnClick="@RefreshDashboard">Refresh</MudButton>
}

@code {
    private DashboardStatsDto stats;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            var response = await Http.GetAsync("api/admin/dashboard");

            if (response.IsSuccessStatusCode)
            {
                stats = await response.Content.ReadFromJsonAsync<DashboardStatsDto>();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error loading dashboard: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshDashboard()
    {
        await LoadDashboardData();
    }

    private Color GetActionColor(string actionType) => actionType?.ToLowerInvariant() switch
    {
        "newreview" => Color.Success,
        "flaggedreview" => Color.Error,
        "newaccount" => Color.Info,
        _ => Color.Default
    };

    private void NavigateToManageCollection(string collectionName)
    {
        // Case-insensitive collection name matching
        var normalizedName = collectionName?.ToLowerInvariant() ?? "";

        var tabIndex = normalizedName switch
        {
            var n when n.Contains("user") => 0,
            var n when n.Contains("movie") => 1,
            var n when n.Contains("banned") || n.Contains("word") => 2,
            _ => 0
        };

        NavigationManager.NavigateTo($"/admin/manage?tab={tabIndex}");
    }
}