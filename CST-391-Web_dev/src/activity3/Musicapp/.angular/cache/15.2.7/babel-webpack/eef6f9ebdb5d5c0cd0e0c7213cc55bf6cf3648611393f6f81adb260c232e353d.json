{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/music-service.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../display-album/display-album.component\";\nfunction ListAlbumsComponent_div_0_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function ListAlbumsComponent_div_0_button_1_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const album_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.onSelectAlbum(album_r3));\n    });\n    i0.ɵɵelementStart(1, \"table\", 5)(2, \"tr\")(3, \"td\", 6);\n    i0.ɵɵelement(4, \"img\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const album_r3 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate1(\"src\", \"assets/images/\", album_r3.Image, \"\", i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", album_r3.Title, \" from \", album_r3.Year, \"\");\n  }\n}\nfunction ListAlbumsComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtemplate(1, ListAlbumsComponent_div_0_button_1_Template, 7, 3, \"button\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.albums);\n  }\n}\nfunction ListAlbumsComponent_app_display_album_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-display-album\", 8);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"album\", ctx_r1.selectedAlbum);\n  }\n}\n// The @Component decorator indicates that the class is an Angular component,\n// specifies the selector, template, and stylesheet for the component.\n// ListAlbumsComponent is responsible for displaying a list of albums for a selected artist.\nexport class ListAlbumsComponent {\n  // Injecting the MusicServiceService to access its methods for album data retrieval.\n  constructor(service) {\n    this.service = service;\n    // @Input decorator to accept 'artist' from parent component.\n    // It holds the currently selected artist object or null if no artist is selected.\n    this.artist = null;\n    // 'albums' holds the list of albums for the selected artist.\n    this.albums = [];\n    // 'selectedAlbum' holds the currently selected album object or null if no album is selected.\n    this.selectedAlbum = null;\n  }\n  // ngOnInit lifecycle hook is called after Angular has initialized all data-bound properties.\n  // Here, it uses the music service to load albums for the selected artist if an artist is selected.\n  ngOnInit() {\n    if (this.artist) {\n      this.albums = this.service.getAlbums(this.artist.Name);\n    }\n  }\n  // 'onSelectAlbum' is an event handler called when an album is selected.\n  // It logs the selected album's title and updates the 'selectedAlbum' property.\n  onSelectAlbum(album) {\n    console.log(\"Selected Album of \" + album.Title);\n    this.selectedAlbum = album;\n  }\n}\nListAlbumsComponent.ɵfac = function ListAlbumsComponent_Factory(t) {\n  return new (t || ListAlbumsComponent)(i0.ɵɵdirectiveInject(i1.MusicServiceService));\n};\nListAlbumsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ListAlbumsComponent,\n  selectors: [[\"app-list-albums\"]],\n  inputs: {\n    artist: \"artist\"\n  },\n  decls: 2,\n  vars: 2,\n  consts: [[\"class\", \"list-group\", 4, \"ngIf\"], [3, \"album\", 4, \"ngIf\"], [1, \"list-group\"], [\"class\", \"list-group-item\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"list-group-item\", 3, \"click\"], [\"align\", \"center\"], [\"width\", \"20%\"], [\"width\", \"50px\", \"height\", \"50px\", 3, \"src\"], [3, \"album\"]],\n  template: function ListAlbumsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ListAlbumsComponent_div_0_Template, 2, 1, \"div\", 0);\n      i0.ɵɵtemplate(1, ListAlbumsComponent_app_display_album_1_Template, 1, 1, \"app-display-album\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.selectedAlbum == null);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.selectedAlbum);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.DisplayAlbumComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;IAIEA,iCAEuC;IAA/BA;MAAA;MAAA;MAAA;MAAA,OAASA,6CAAoB;IAAA,EAAC;IAEpCA,gCAAsB;IAGFA,yBAAuE;IAAAA,iBAAK;IAE5FA,0BAAI;IAAAA,YAAuC;IAAAA,iBAAK;;;;IAF3BA,eAAqC;IAArCA,wFAAqC;IAEtDA,eAAuC;IAAvCA,sEAAuC;;;;;IAZnDA,8BAAsD;IAGpDA,gFAYS;IACXA,iBAAM;;;;IAZsBA,eAAS;IAATA,uCAAS;;;;;IAgBrCA,uCAAqF;;;;IAA5CA,4CAAuB;;;AChBhE;AACA;AAOA;AACA,OAAM,MAAOC,mBAAmB;EAW/B;EACAC,YAAoBC,OAA4B;IAA5B,YAAO,GAAPA,OAAO;IAX3B;IACA;IACS,WAAM,GAAkB,IAAI;IAErC;IACA,WAAM,GAAY,EAAE;IAEpB;IACA,kBAAa,GAAiB,IAAI;EAGkB;EAEpD;EACA;EACAC,QAAQ;IACP,IAAI,IAAI,CAACC,MAAM,EAAE;MAChB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACH,OAAO,CAACI,SAAS,CAAC,IAAI,CAACF,MAAM,CAACG,IAAI,CAAC;;EAExD;EAEA;EACA;EACOC,aAAa,CAACC,KAAY;IAChCC,OAAO,CAACC,GAAG,CAAC,oBAAoB,GAAGF,KAAK,CAACG,KAAK,CAAC;IAC/C,IAAI,CAACC,aAAa,GAAGJ,KAAK;EAC3B;;AA3BYT,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAc;EAAAC;IAAAX;EAAA;EAAAY;EAAAC;EAAAC;EAAAC;IAAA;MDbhCpB,oEAgBM;MAINA,gGAAqF;;;MApB5DA,gDAA2B;MAoBhCA,eAAmB;MAAnBA,wCAAmB","names":["i0","ListAlbumsComponent","constructor","service","ngOnInit","artist","albums","getAlbums","Name","onSelectAlbum","album","console","log","Title","selectedAlbum","selectors","inputs","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Owenl\\source\\repos\\Activity3\\Musicapp\\src\\app\\list-albums\\list-albums.component.html","C:\\Users\\Owenl\\source\\repos\\Activity3\\Musicapp\\src\\app\\list-albums\\list-albums.component.ts"],"sourcesContent":["<!-- This div only displays if no album has been selected yet. It shows a list of albums. -->\n<div class=\"list-group\" *ngIf=\"selectedAlbum == null\">\n  <!-- Iterates over the albums array and creates a button for each album. \n       When a button is clicked, it calls onSelectAlbum() with the corresponding album. -->\n  <button class=\"list-group-item\" \n          *ngFor=\"let album of albums\"\n          (click)=\"onSelectAlbum(album)\">\n    <!-- Album information is displayed in a table format within the button -->\n    <table align=\"center\">\n      <tr>\n        <!-- Album cover image -->\n        <td width=\"20%\"><img src=\"assets/images/{{ album.Image }}\" width=\"50px\" height=\"50px\"/></td>\n        <!-- Album title and year -->\n        <td>{{ album.Title }} from {{ album.Year }}</td>\n      </tr>\n    </table>\n  </button>\n</div>\n\n<!-- If an album has been selected, this component is displayed and passed the selected album.\n     app-display-album is a child component responsible for displaying detailed information about an album. -->\n<app-display-album *ngIf=\"selectedAlbum\" [album]=\"selectedAlbum\"></app-display-album>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { MusicServiceService } from '../service/music-service.service';\nimport { Album } from '../models/Album';\nimport { Artist } from '../models/Artist';\n\n// The @Component decorator indicates that the class is an Angular component,\n// specifies the selector, template, and stylesheet for the component.\n@Component({\n\tselector: 'app-list-albums', // The component's CSS element selector\n\ttemplateUrl: './list-albums.component.html', // The location of the template file for this component\n\tstyleUrls: ['./list-albums.component.css'] // The location of the CSS styles for this component\n})\n\n// ListAlbumsComponent is responsible for displaying a list of albums for a selected artist.\nexport class ListAlbumsComponent implements OnInit {\n\t// @Input decorator to accept 'artist' from parent component.\n\t// It holds the currently selected artist object or null if no artist is selected.\n\t@Input() artist: Artist | null = null;\n\n\t// 'albums' holds the list of albums for the selected artist.\n\talbums: Album[] = [];\n\n\t// 'selectedAlbum' holds the currently selected album object or null if no album is selected.\n\tselectedAlbum: Album | null = null;\n\n\t// Injecting the MusicServiceService to access its methods for album data retrieval.\n\tconstructor(private service: MusicServiceService) { }\n\n\t// ngOnInit lifecycle hook is called after Angular has initialized all data-bound properties.\n\t// Here, it uses the music service to load albums for the selected artist if an artist is selected.\n\tngOnInit() {\n\t\tif (this.artist) {\n\t\t\tthis.albums = this.service.getAlbums(this.artist.Name);\n\t\t}\n\t}\n\n\t// 'onSelectAlbum' is an event handler called when an album is selected.\n\t// It logs the selected album's title and updates the 'selectedAlbum' property.\n\tpublic onSelectAlbum(album: Album) {\n\t\tconsole.log(\"Selected Album of \" + album.Title);\n\t\tthis.selectedAlbum = album;\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}